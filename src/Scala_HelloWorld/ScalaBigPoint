Scala的核心力量：
基于自上而下和自下而上的软件设计和编程实践的基础上结合状态不可变性基础之上的融合了类型系统和隐式转换技巧的函数式编程
自上而下(对象)：面向对象编程，把软件系统作为一个个的对象，具体的功能由对象和对象之间进行传递
自下而上(动作)：函数式编程，强调功能的实现
数据状态不可变：简易化编程  emp：如果数据状态是可变的在一个庞大的数据结构中是可变的，进行某些操作时，要加上锁，复杂化
数据状态不可变可以减少BUG，方便并发

类型系统和隐式转换：
  类型系统通常来说就是上边界，下边界，逆变和协变 以及viewBounds
  隐式转换 ： 1. 通常来说一个类没有某个功能的情况下，想要添加这个功能写一个加强肋，然后通过隐式转换称普通类，让他也有这个动作


黄金定律
1.状态不可变
2.优先考虑面向值的编程方式
3.多步骤操作采用链式操作
4.使用Option用None取代Null，Option可以像集合一样进行操作
5.使用伴生对象构造接口和或者接口或者抽象类的实例


如果在使用一个类型的时候没有找到合适的方法，就会去伴生对象中寻找隐士功能
如果在这个类中没有周到方法，则会去这个类的继承类或者接口中寻找伴生对象



